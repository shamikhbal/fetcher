{"version":3,"sources":["../src/types/content_types.ts","../src/helper/body_parser.ts","../src/helper/header_parser.ts","../src/helper/logger.ts","../src/helper/param_encoder.ts","../src/helper/response_builder.ts","../src/types/methods.ts","../src/fetcher.ts","../src/index.ts"],"sourcesContent":["export const contentTypes = {\n  json: \"application/json\",\n  formData: \"multipart/form-data\",\n  formUrlEncoded: \"application/x-www-form-urlencoded\",\n  textPlain: \"text/plain\",\n} as const;\n\nexport type ContentType = (typeof contentTypes)[keyof typeof contentTypes];\n","import { ContentType, contentTypes } from \"../types/content_types\";\n\nconst formUrlEncoded = (jsonBody: Record<string, any>): URLSearchParams => {\n  const params = new URLSearchParams();\n  for (const key in jsonBody) {\n    if (jsonBody.hasOwnProperty(key)) {\n      params.append(key, jsonBody[key]);\n    }\n  }\n  return params;\n};\n\nconst bodyParser = ({\n  contentType,\n  jsonBody,\n}: {\n  contentType: ContentType;\n  jsonBody: any;\n}): any => {\n  if (contentType === contentTypes.formData && jsonBody instanceof FormData) {\n    return jsonBody; // Directly use the FormData instance\n  }\n\n  switch (contentType) {\n    case contentTypes.json:\n      return JSON.stringify(jsonBody);\n    case contentTypes.formUrlEncoded:\n      return formUrlEncoded(jsonBody);\n    case contentTypes.textPlain:\n      return JSON.stringify(jsonBody);\n    default:\n      return jsonBody;\n  }\n};\n\nexport default bodyParser;\n","import { ContentType, contentTypes } from \"../types/content_types\";\n\nconst headersParser = ({\n  jsonHeaders,\n  contentType,\n}: {\n  jsonHeaders?: Record<string, string>;\n  contentType: ContentType;\n}): Headers => {\n  const headers = new Headers();\n\n  if (jsonHeaders) {\n    headers.set(\n      \"Content-Type\",\n      jsonHeaders[\"Content-Type\"] || contentType || contentTypes.json\n    );\n\n    Object.entries(jsonHeaders).forEach(([key, value]) => {\n      if (key !== \"Content-Type\") {\n        headers.append(key, value);\n      }\n    });\n  } else {\n    headers.set(\"Content-Type\", contentType || contentTypes.json);\n  }\n\n  return headers;\n};\n\nexport default headersParser;\n","import pino from \"pino\";\n\nconst pino_log = pino(\n  {\n    level: \"trace\", // Set the desired log level\n    timestamp: pino.stdTimeFunctions.isoTime, // Optional: Add timestamp\n    transport: {\n      target: \"pino-pretty\", // Use pino-pretty to format the logs\n      options: {\n        colorize: true, // Enable color output for better visibility in the terminal\n        timestampKey: \"time\", // Customize the timestamp key\n        translateTime: \"SYS:standard\", // Format the timestamp to a readable format\n        ignore: \"pid,hostname\", // Optional: Exclude unnecessary fields\n      },\n    },\n  },\n  process.stdout\n); // Ensure the logs are written to stdout (console)\n\nconst logger = (start: number, method: string, url: string, response: any) => {\n  if (response.ok) {\n    pino_log.info(\n      `[${Date.now() - start}ms] [${response.status}] [${method}] - ${url}`\n    );\n  } else {\n    pino_log.error(\n      `[${Date.now() - start}ms] [${response.status}] [${method}] - ${url}`\n    );\n  }\n};\n\nexport default logger;\n","const encodeParams = (params: Record<string, string>): string => {\n  return new URLSearchParams(params).toString();\n};\n\nexport default encodeParams;\n","import { ResponseBody } from \"../types/response_body\";\n\nconst responseBuilder = async (response: Response): Promise<ResponseBody> => {\n  const text = await response.text();\n  try {\n    const json = JSON.parse(text);\n    return {\n      ok: response.ok,\n      status: response.status,\n      statusText: response.statusText,\n      data: json,\n    };\n  } catch (err) {\n    return {\n      ok: response.ok,\n      status: response.status,\n      statusText: response.statusText,\n      data: text,\n    };\n  }\n};\n\nexport default responseBuilder;\n","export const methods = {\n  get: \"GET\",\n  post: \"POST\",\n  put: \"PUT\",\n  delete: \"DELETE\",\n} as const;\n\nexport type Method = (typeof methods)[keyof typeof methods];\n","import bodyParser from \"./helper/body_parser\";\nimport headersParser from \"./helper/header_parser\";\nimport logger from \"./helper/logger\";\nimport encodeParams from \"./helper/param_encoder\";\nimport responseBuilder from \"./helper/response_builder\";\nimport { contentTypes } from \"./types/content_types\";\nimport { methods } from \"./types/methods\";\nimport { RequestOptions } from \"./types/request_options\";\nimport { ResponseBody } from \"./types/response_body\";\n\nconst fetchWithTimeout = async (\n  url: string,\n  options: RequestInit,\n  timeout: number\n): Promise<Response> => {\n  const controller = new AbortController();\n  const timer = setTimeout(() => controller.abort(), timeout);\n  try {\n    const response = await fetch(url, {\n      ...options,\n      signal: controller.signal,\n    });\n    clearTimeout(timer);\n    return response;\n  } catch (error) {\n    clearTimeout(timer);\n    throw error;\n  }\n};\n\nclass Fetcher {\n  private baseURL: string;\n  private defaultHeaders: Record<string, string>;\n  private logging: boolean;\n\n  constructor({\n    baseURL = \"\",\n    defaultHeaders = {},\n    logging = false,\n  }: {\n    baseURL?: string;\n    defaultHeaders?: Record<string, string>;\n    logging?: boolean;\n  } = {}) {\n    this.baseURL = baseURL;\n    this.defaultHeaders = defaultHeaders;\n    this.logging = logging;\n  }\n\n  async request({\n    method = methods.get,\n    url,\n    contentType = contentTypes.json,\n    headers = {},\n    params,\n    body,\n    timeout = 5000,\n  }: RequestOptions): Promise<ResponseBody> {\n    const finalUrl = this.baseURL + url;\n    const combinedHeaders = { ...this.defaultHeaders, ...headers };\n\n    console.log(\"Headers : \", combinedHeaders);\n\n    let requestOptions: RequestInit = {\n      method,\n      headers: headersParser({ jsonHeaders: combinedHeaders, contentType }),\n      redirect: \"follow\",\n    };\n\n    if (params) {\n      const encodedParams = encodeParams(params);\n      url = `${finalUrl}?${encodedParams}`;\n    }\n\n    if (body) {\n      requestOptions.body = bodyParser({\n        contentType,\n        jsonBody: body,\n      });\n    }\n\n    const start = Date.now();\n\n    try {\n      const response = await fetchWithTimeout(\n        finalUrl,\n        requestOptions,\n        timeout\n      );\n\n      if (this.logging) {\n        logger(start, method, finalUrl, response);\n      }\n\n      if (response.ok) {\n        return await responseBuilder(response);\n      } else {\n        throw await responseBuilder(response);\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async get({\n    url,\n    contentType = contentTypes.json,\n    headers = {},\n    params,\n    timeout = 5000,\n  }: RequestOptions): Promise<ResponseBody> {\n    return this.request({\n      method: methods.get,\n      url,\n      contentType,\n      headers,\n      params,\n      timeout,\n    });\n  }\n\n  async post({\n    url,\n    contentType = contentTypes.json,\n    headers = {},\n    params,\n    body,\n    timeout = 5000,\n  }: RequestOptions): Promise<ResponseBody> {\n    return this.request({\n      method: methods.put,\n      url,\n      contentType,\n      headers,\n      params,\n      body,\n      timeout,\n    });\n  }\n\n  async put({\n    url,\n    contentType = contentTypes.json,\n    headers = {},\n    params,\n    body,\n    timeout = 5000,\n  }: RequestOptions): Promise<ResponseBody> {\n    return this.request({\n      method: methods.put,\n      url,\n      contentType,\n      headers,\n      params,\n      body,\n      timeout,\n    });\n  }\n\n  async delete({\n    url,\n    contentType = contentTypes.json,\n    headers = {},\n    params,\n    body,\n    timeout = 5000,\n  }: RequestOptions): Promise<ResponseBody> {\n    return this.request({\n      method: methods.delete,\n      url,\n      contentType,\n      headers,\n      params,\n      body,\n      timeout,\n    });\n  }\n}\n\nexport default Fetcher;\n","import Fetcher from \"./fetcher\";\nimport { contentTypes } from \"./types/content_types\";\nimport { methods } from \"./types/methods\";\n\nconst fetcher = {\n  Fetcher,\n  contentTypes,\n  methods,\n};\n\nexport default fetcher;\nexport { contentTypes, Fetcher, methods };\n"],"mappings":"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","names":[]}