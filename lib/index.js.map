{"version":3,"sources":["../src/index.ts","../src/types/content_types.ts","../src/types/methods.ts","../src/helper/response_builder.ts","../src/helper/header_parser.ts","../src/helper/body_parser.ts","../src/helper/param_encoder.ts"],"sourcesContent":["import { URLSearchParams } from \"url\";\nimport { ContentType, contentTypes } from \"./types/content_types\";\nimport { methods } from \"./types/methods\";\nimport { RequestOptions } from \"./types/request_options\";\nimport { ResponseBody } from \"./types/response_body\";\nimport responseBuilder from \"./helper/response_builder\";\nimport headersParser from \"./helper/header_parser\";\nimport bodyParser from \"./helper/body_parser\";\nimport encodeParams from \"./helper/param_encoder\";\n\nconst fetchWithTimeout = (\n  url: string,\n  options: RequestInit,\n  timeout: number\n): Promise<Response> => {\n  return Promise.race([\n    fetch(url, options),\n    new Promise<Response>((_, reject) =>\n      setTimeout(() => reject(new Error(\"Request timed out\")), timeout)\n    ),\n  ]);\n};\n\nexport const fetcher = async ({\n  method = methods.get,\n  url,\n  contentType = contentTypes.json,\n  headers,\n  params,\n  body,\n  timeout = 5000,\n}: RequestOptions): Promise<ResponseBody> => {\n  let requestOptions: RequestInit = {\n    method: method,\n    headers: headersParser({ jsonHeaders: headers, contentType }),\n    redirect: \"follow\",\n  };\n\n  if (params) {\n    const encodedParams = encodeParams(params);\n    url = `${url}?${encodedParams}`;\n  }\n\n  if (body) {\n    requestOptions.body = bodyParser({\n      contentType,\n      jsonBody: body,\n    });\n  }\n\n  return await fetchWithTimeout(url, requestOptions, timeout)\n    .then(responseBuilder)\n    .catch((error) => {\n      throw error;\n    });\n};\n\nexport const create_instance = ({\n  baseURL = \"\",\n  defaultHeaders = {},\n}: {\n  baseURL?: string;\n  defaultHeaders?: Record<string, string>;\n}) => {\n  return async ({\n    method = methods.get,\n    url,\n    contentType = contentTypes.json,\n    headers = {},\n    params,\n    body,\n    timeout = 5000,\n  }: RequestOptions): Promise<ResponseBody> => {\n    const finalUrl = baseURL + url;\n    const combinedHeaders = { ...defaultHeaders, ...headers };\n\n    return fetcher({\n      method,\n      url: finalUrl,\n      contentType,\n      headers: combinedHeaders,\n      params,\n      body,\n      timeout,\n    });\n  };\n};\n\nexport default {\n  create_instance,\n  fetcher,\n  contentTypes,\n  methods,\n};\n","export const contentTypes = {\n  json: \"application/json\",\n  formData: \"multipart/form-data\",\n  formUrlEncoded: \"application/x-www-form-urlencoded\",\n  textPlain: \"text/plain\",\n} as const;\n\nexport type ContentType = (typeof contentTypes)[keyof typeof contentTypes];\n","export const methods = {\n  get: \"GET\",\n  post: \"POST\",\n  put: \"PUT\",\n  delete: \"DELETE\",\n} as const;\n\nexport type Method = (typeof methods)[keyof typeof methods];\n","import { ResponseBody } from \"../types/response_body\";\n\nconst responseBuilder = async (response: Response): Promise<ResponseBody> => {\n  const text = await response.text();\n  try {\n    const json = JSON.parse(text);\n    return {\n      ok: response.ok,\n      status: response.status,\n      statusText: response.statusText,\n      data: json,\n    };\n  } catch (err) {\n    console.error(\"Failed to parse response JSON:\", err);\n\n    return {\n      ok: response.ok,\n      status: response.status,\n      statusText: response.statusText,\n      data: text,\n    };\n  }\n};\n\nexport default responseBuilder;\n","import { ContentType, contentTypes } from \"../types/content_types\";\n\nconst headersParser = ({\n  jsonHeaders,\n  contentType,\n}: {\n  jsonHeaders?: Record<string, string>;\n  contentType: ContentType;\n}): Headers => {\n  const headers = new Headers();\n\n  if (jsonHeaders) {\n    headers.set(\n      \"Content-Type\",\n      jsonHeaders[\"Content-Type\"] || contentType || contentTypes.json\n    );\n\n    Object.entries(jsonHeaders).forEach(([key, value]) => {\n      if (key !== \"Content-Type\") {\n        headers.append(key, value);\n      }\n    });\n  } else {\n    headers.set(\"Content-Type\", contentType || contentTypes.json);\n  }\n\n  return headers;\n};\n\nexport default headersParser;\n","import { ContentType, contentTypes } from \"../types/content_types\";\n\nconst formUrlEncoded = (jsonBody: Record<string, any>): URLSearchParams => {\n  const params = new URLSearchParams();\n  for (const key in jsonBody) {\n    if (jsonBody.hasOwnProperty(key)) {\n      params.append(key, jsonBody[key]);\n    }\n  }\n  return params;\n};\n\nconst bodyParser = ({\n  contentType,\n  jsonBody,\n}: {\n  contentType: ContentType;\n  jsonBody: any;\n}): any => {\n  if (contentType === contentTypes.formData && jsonBody instanceof FormData) {\n    return jsonBody; // Directly use the FormData instance\n  }\n\n  switch (contentType) {\n    case contentTypes.json:\n      return JSON.stringify(jsonBody);\n    case contentTypes.formUrlEncoded:\n      return formUrlEncoded(jsonBody);\n    case contentTypes.textPlain:\n      return JSON.stringify(jsonBody);\n    default:\n      return jsonBody;\n  }\n};\n\nexport default bodyParser;\n","const encodeParams = (params: Record<string, string>): string => {\n  return new URLSearchParams(params).toString();\n};\n\nexport default encodeParams;\n"],"mappings":"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","names":[]}